<%- include('../partials/navbar')%>

 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<link rel="stylesheet" href="/styles/app.css">

<link href="https://api.mapbox.com/mapbox-gl-js/v2.5.1/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.5.1/mapbox-gl.js"></script>
<style>
   
    #map {  width: 100%; height: 500px; }
    </style>
</script>


<header class="jumbotron text-light rounded-0 d-none d-md-block mb-5">
    <div class="container ">
      <div class="jumbotron-text mt-5 text-center">
        
          <h1 class="display-3 jumbotronText">Welcome to Camp Squre!</h1>
          <p class="lead jumbotronText">This is where the adventure begins...</p>
       
      </div>
    </div>
  </header>
  
  
  
  
  
  <div class="container" id="map"></div>

  
<h1 
style="display: flex; justify-content: center;">All Campgrounds</h1>

   
<div class="container">
    <div class="row">
        
        <% for(let campground of campgrounds){%>
            <div class="col-xl-4">
                <div class="card mb-4 cardItem"
                >
                    <div class="">
                        <div class="">
                            <% if(campground.images.length){%> 
                            <img  class="img-fluid" style="width: fit-content;" alt="" src=" <%=campground.images[0].url%>" >
                                <% }else{ %> 
                                    <img  class="img-fluid" style="width: fit-content;" alt="" src="https://res.cloudinary.com/camp-square/image/upload/v1636075704/CampSquare/fj56batbwa1a1apb9yql.jpg" >

                                 <% } %> 
                                    
                        </div>
                       
                        <div class="">
                            <div class="card-body">
                                <h5 class="card-body" style="text-align: left;" >
                                    <%=campground.title%>
                                </h5>
                                <p class="card-text" >
                                <%= campground.description.substring(0, 200) + "..."  %>
                                   
                                </p>
                                <p class="card-text text-muted">
                                    <small class="text-muted">
                                        <%=campground.location%>
                                    </small>
                                </p>
                                <a class="btn btn-primary" href="/campgrounds/<%=campground._id%>"> 
                                    View  <%=campground.title%>
        
                                </a>
                                
                            </div>
                        </div>
                    </div>
        
                </div>
           
               
            </div>

            
        <%}%>


    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
<script src="/scripts/validateForms.js">
</script>
<script>
    const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
    const campgrounds= {features:<%- JSON.stringify(campgrounds)  %>}
   
</script>
<script>
    mapboxgl.accessToken = mapToken;
const map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/mapbox/light-v10',
center: [35.1795933806353, 39.0604813685019],
zoom: 5
});

 
map.on('load', () => {
// Add a new source from our GeoJSON data and
// set the 'cluster' option to true. GL-JS will
// add the point_count property to your source data.
map.addSource('campgrounds', {
type: 'geojson',
// Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
// from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
data: campgrounds,
cluster: true,
clusterMaxZoom: 14, // Max zoom to cluster points on
clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
});

 
map.addLayer({
id: 'clusters',
type: 'circle',
source: 'campgrounds',
filter: ['has', 'point_count'],
paint: {
// Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
// with three steps to implement three types of circles:
//   * Blue, 20px circles when point count is less than 100
//   * Yellow, 30px circles when point count is between 100 and 750
//   * Pink, 40px circles when point count is greater than or equal to 750
'circle-color': [
'step',
['get', 'point_count'],
'#2a9d8f',
10,
'#e9c46a',
20,
'#f4a261'
],
'circle-radius': [
'step',
['get', 'point_count'],
20,
10,
30,
30,
40
]
}
});
 
map.addLayer({
id: 'cluster-count',
type: 'symbol',
source: 'campgrounds',
filter: ['has', 'point_count'],
layout: {
'text-field': '{point_count_abbreviated}',
'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
'text-size': 12
}
});
 
map.addLayer({
id: 'unclustered-point',
type: 'circle',
source: 'campgrounds',
filter: ['!', ['has', 'point_count']],
paint: {
'circle-color': '#e76f51',
'circle-radius': 10,
'circle-stroke-width': 1,
'circle-stroke-color': '#e76f51'
}
});
 
 // inspect a cluster on click
 map.on('click', 'clusters', function (e) {
        const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
        });
        const clusterId = features[0].properties.cluster_id;
        map.getSource('campgrounds').getClusterExpansionZoom(
            clusterId,
            function (err, zoom) {
                if (err) return;

                map.easeTo({
                    center: features[0].geometry.coordinates,
                    zoom: zoom
                });
            }
        );
    });

    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on('click', 'unclustered-point', function (e) {
        const { popUpMarkup } = e.features[0].properties;
        const coordinates = e.features[0].geometry.coordinates.slice();

        // Ensure that if the map is zoomed out such that
        // multiple copies of the feature are visible, the
        // popup appears over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(popUpMarkup)
            .addTo(map);
    });

    map.on('mouseenter', 'clusters', function () {
        map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', function () {
        map.getCanvas().style.cursor = '';
    });
});
map.addControl(new mapboxgl.NavigationControl());
</script>
 
<%- include('../partials/footer')%>
